* Registers
#+BEGIN_SRC emacs-lisp
  (set-register ?o (cons 'file "~/org/notes.org"))
  (set-register ?c (cons 'file "~/.emacs.d/config.org"))
#+END_SRC
* Themes
#+BEGIN_SRC emacs-lisp
(load-theme 'deeper-blue)
#+END_SRC
* Encrypt
#+BEGIN_SRC emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.
  (setq org-crypt-key nil)
#+END_SRC
* Customize settings
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC
* Font 
#+BEGIN_SRC emacs-lisp
;;(set-default-font "Source Code Pro 10")
(add-to-list 'default-frame-alist '(font . "Source Code Pro-11"))
#+END_SRC
* Org Mode
#+BEGIN_SRC emacs-lisp  
  (use-package org-alert
      :ensure t
      :init
      (require 'org-alert)
      (org-alert-enable)
      (setq alert-default-style 'libnotify))

  (setq org-modules '(org-protocol))

  (setq org-default-notes-file "~/org/gtd.org")

  (require 'org-protocol)

  (bind-key "<f9> <f9>" 'org-agenda)
  (bind-key "C-c a" 'org-capture)

  (setq org-capture-templates
        (quote (
                ("x" "org-protocol" entry (file+headline "~/org/gtd.org" "INBOX")
                 "* TODO %c" :immediate-finish)
                ("t" "Task" entry (file+headline "~/org/gtd.org" "INBOX")
                 "* TODO %^{Task} %U %^g")
                
                ("c" "Calendar" entry (file+headline "~/org/gtd.org" "CALENDAR")
                 "** %^{Description} %^g
     SCHEDULED: %^t
     Added: %U"
                 :immediate-finish t))))

  (setq org-todo-keywords
        '((sequence
           "TODO(t)" "STARTED(s)" "WAITING(w)" "NEXT(n)" "|" "DONE(d)" "CANCELED(c)"
           )))

  (setq org-todo-keyword-faces '(("NEXT" :foreground "deep sky blue" :weight bold)))

  (setq org-tag-alist '(("@Work" . ?b)
                        ("@Home" . ?h)
                        ("@Writing" . ?w)
                        ("@Coding" . ?c)
                        ("@Phone" . ?p)
                        ("@Reading" . ?r)
                        ("@Computer" . ?l)
                        ("@English" . ?e)))

  (setq org-tag-faces '(("@Computer" . (:foreground "orange" :weight bold))))

#+END_SRC
* Sane defaults
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  (blink-cursor-mode -1)
;;(global-linum-mode)
  (setq linum-format "%2d")
  (show-paren-mode 1)
  (set-default 'cursor-type 'hbar)
  (iswitchb-mode 1)

  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Scratch message
  (setq initial-scratch-message
    (concat "\nHello Liathit. Today is: "
      (format-time-string "%A %d %B %Y at %T\n")))

  ;; Winner mode
  (winner-mode t)

  ;; Windmove
  (use-package windmove
    :defer t
    :bind
    (("<f2> <right>" . windmove-right)
     ("<f2> <left>" . windmove-left)
     ("<f2> <up>" . windmove-up)
     ("<f2> <down>" . windmove-down)
     ))

  ;; Disable linum-mode in eshell
  (add-hook 'eshell-mode-hook (lambda () (linum-mode -1)))
#+END_SRC
* Tramp
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (add-to-list 'tramp-default-proxies-alist
               '(nil "\\`root\\'" "/ssh:%h:"))
  (add-to-list 'tramp-default-proxies-alist
               '((regexp-quote (system-name)) nil nil))
#+END_SRC
* ELPA packages
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
** emoji
#+BEGIN_SRC emacs-lisp
  (use-package emoji-cheat-sheet-plus
      :defer t
      :init
      (progn
        ;; enabled emoji in buffer
        (add-hook 'org-mode-hook 'emoji-cheat-sheet-plus-display-mode)
        ;; insert emoji with helm
        (global-set-key (kbd "C-c C-e") 'emoji-cheat-sheet-plus-insert)))
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :disabled t
    :init
    (setq org-bullets-bullet-list
          '("◉" "◎" "⚫" "○" "►" "◇"))
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** paredit
 #+BEGIN_SRC emacs-lisp
   (use-package paredit
     :ensure t)
 #+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    :bind (("\C-s" . swiper)))
#+END_SRC
** ido-vertical-mode
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
   :ensure t
   :disabled t
   :config
   (progn (require 'ido-vertical-mode)
   (ido-vertical-mode 1)))
#+END_SRC
** auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :diminish auto-complete-mode
    :config
    (ac-config-default))
#+END_SRC
** which key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config
     (which-key-mode))
 #+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind (("C-c f" . helm-projectile-find-file)
           ("C-c pp" . helm-projectile-switch-project)
           ("C-c psg" . helm-projectile-grep)
           ("C-c pk" . projectile-kill-buffers)
           ("C-c pi". projectile-invalidate-cache)))
#+END_SRC
** helm-projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :init
    (projectile-global-mode)
    (setq projectile-switch-project-action 'helm-projectile-find-file)
    (helm-projectile-on))
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 100)
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01  ; this actually updates things
                                          ; reeeelatively quickly.
            helm-yas-display-key-on-candidate t
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t)
      (helm-mode))
    :bind (("C-c h" . helm-mini)
           ("C-h a" . helm-apropos)
           ("C-x C-b" . helm-buffers-list)
           ("C-x b" . helm-buffers-list)
           ("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)
           ("C-x c o" . helm-occur)
           ("C-x c s" . helm-swoop)
           ("C-x c y" . helm-yas-complete)
           ("C-x c Y" . helm-yas-create-snippet-on-region)
           ("C-x c b" . my/helm-do-grep-book-notes)
           ("C-x c SPC" . helm-all-mark-rings)))
  (ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
#+END_SRC
** helm-swoop
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
   :ensure t
   :bind
   (("C-S-s" . helm-swoop)
    ("M-i" . helm-swoop)
    ("M-s s" . helm-swoop)
    ("M-s M-s" . helm-swoop)
    ("M-I" . helm-swoop-back-to-last-point)
    ("C-c M-i" . helm-multi-swoop)
    ("C-x M-i" . helm-multi-swoop-all)
    )
   :config
   (progn
     (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
     (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop))
  )
#+END_SRC
* Programming
** python
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :config
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t))
#+END_SRC
** ac-cider
#+BEGIN_SRC emacs-lisp
  (use-package ac-cider
    :ensure t
    :mode)
#+END_SRC
** clojure-cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
#+END_SRC
** clojure-mode
#+BEGIN_SRC emacs-lisp
    (use-package clojure-mode
      :ensure t
      :init
      :bind (("C-." . cider-repl-clear-buffer)))
#+END_SRC
** virtualenvwrapper
#+BEGIN_SRC emacs-lisp
    (use-package virtualenvwrapper
      :ensure t
      :config
      (require 'virtualenvwrapper)
      (venv-initialize-interactive-shells)
      (venv-initialize-eshell))
#+END_SR
